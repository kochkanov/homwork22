{"version":3,"sources":["itils/hooks/useInput.js","components/SimpleInput.js","App.js","index.js"],"names":["inputReduce","prevState","action","type","enteredValue","value","isTouched","useInput","validateState","useReducer","inputs","dispatchInputs","valueIsValid","hasError","isValid","valueChangeHandler","event","console","log","target","inputBlurHandler","SimpleInput","props","trim","enteredName","enteredNameIsValid","nameInputHasError","nameChangeHandler","nameBlurChangeHandler","includes","enteredEmail","enteredEmailIsValid","emailInputHasError","emailChangeHandler","emailBlurChangeHandler","length","enteredPassword","enteredPasswordIsValid","passwordInputHasError","passwordChangeHandler","passwordBlurChangeHandler","formIsValid","nameInputClasses","emailInputClasses","passwordInputClasses","onSubmit","preventDefault","className","htmlFor","id","onChange","onBlur","disabled","App","ReactDOM","render","document","getElementById"],"mappings":"gNAIA,SAASA,EAAYC,EAAUC,GAC3B,MAAmB,WAAhBA,EAAOC,KACN,2BACOF,GADP,IAEIG,aAAcF,EAAOG,QAGV,eAAhBH,EAAOC,KACN,2BACOF,GADP,IAEIK,UAAWJ,EAAOG,aAH1B,EAQG,IAAME,EAAW,SAACC,GACvB,MAAiCC,qBAAWT,EAAa,CACvDI,aAAc,GACdE,WAAW,IAFb,mBAAOI,EAAP,KAAeC,EAAf,KAKMC,EAAeJ,EAAcE,EAAON,cACpCS,GAAYD,GAAgBF,EAAOJ,UAgBzC,MAAO,CACLD,MAAOK,EAAON,aACdU,QAASF,EACTC,WACAE,mBAlByB,SAACC,GACxBC,QAAQC,IAAIF,EAAMG,OAAOd,OAC3BM,EAAe,CACbR,KAAM,SACNE,MAAOW,EAAMG,OAAOd,SAetBe,iBAZuB,SAACJ,GACxBL,EAAe,CACbR,KAAM,aACNE,OAAO,O,OCmEEgB,EApGK,SAACC,GAEnB,MAMKf,GAAS,SAACF,GAAD,MAA4B,KAAjBA,EAAMkB,UALtBC,EADT,EACEnB,MACSoB,EAFX,EAEEX,QACUY,EAHZ,EAGEb,SACoBc,EAJtB,EAIEZ,mBACkBa,EALpB,EAKER,iBAIF,EAMIb,GAAS,SAACF,GAAD,OAASA,EAAMwB,SAAS,QAL5BC,EADT,EACEzB,MACS0B,EAFX,EAEEjB,QACUkB,EAHZ,EAGEnB,SACoBoB,EAJtB,EAIElB,mBACkBmB,EALpB,EAKEd,iBAGF,EAMIb,GAAS,SAACF,GAAD,OAASA,EAAM8B,QAAS,KAL5BC,EADT,EACE/B,MACSgC,EAFX,EAEEvB,QACUwB,EAHZ,EAGEzB,SACoB0B,EAJtB,EAIExB,mBACkByB,EALpB,EAKEpB,iBAKEqB,GAAc,EACdhB,GAAsBM,GAAuBM,IAC/CI,GAAc,GAEhB,IAMMC,EAAmBhB,EACrB,uBACA,eACEiB,EAAoBX,EACtB,uBACA,eAGEY,EAAuBN,EACzB,uBACA,eAGJ,OACE,uBAAMO,SApBsB,SAAC7B,GAC7BA,EAAM8B,kBAmBN,UACE,sBAAKC,UAAWL,EAAhB,UACE,uBAAOM,QAAQ,OAAf,uBACA,uBACE7C,KAAK,OACL8C,GAAG,OACH5C,MAAOmB,EACP0B,SAAUvB,EACVwB,OAAQvB,IAETF,GAAqB,0DAEtB,sBAAKqB,UAAWJ,EAAhB,UACK,uBAAOK,QAAQ,OAAf,wBACL,uBACE7C,KAAK,QACL8C,GAAG,QACH5C,MAAOyB,EACPoB,SAAUjB,EACVkB,OAAQjB,IAERI,GAAyB,0DAK3B,sBAAKS,UAAWH,EAAhB,UACK,uBAAOI,QAAQ,OAAf,2BACL,uBACE7C,KAAK,WACL8C,GAAG,WACH5C,MAAO+B,EACPc,SAAUX,EACVY,OAAQX,IAERF,GAAyB,0DAM7B,qBAAKS,UAAU,eAAf,SACE,wBAAQK,UAAWX,EAAnB,0BCxFOY,MATf,WACE,OACE,qBAAKN,UAAU,MAAf,SAEE,cAAC,EAAD,OCFNO,IAASC,OAAO,cAAC,EAAD,IAASC,SAASC,eAAe,W","file":"static/js/main.67877dd0.chunk.js","sourcesContent":["//use useReducer\r\n\r\nimport { useReducer } from \"react\";\r\n\r\nfunction inputReduce(prevState,action){\r\n    if(action.type === \"INPUTS\"){\r\n        return{\r\n            ...prevState,\r\n            enteredValue: action.value,\r\n        }\r\n    }\r\n    if(action.type === \"INPUT_BLUR\"){\r\n        return{\r\n            ...prevState,\r\n            isTouched: action.value\r\n        }\r\n    }\r\n}\r\n\r\nexport const useInput = (validateState) => {\r\n  const [inputs, dispatchInputs] = useReducer(inputReduce, {\r\n    enteredValue: \"\",\r\n    isTouched: false,\r\n  });\r\n\r\n  const valueIsValid = validateState(inputs.enteredValue); // true || false\r\n  const hasError = !valueIsValid && inputs.isTouched;\r\n\r\n  const valueChangeHandler = (event) => {\r\n      console.log(event.target.value);\r\n    dispatchInputs({\r\n      type: \"INPUTS\",\r\n      value: event.target.value,\r\n    });\r\n  };\r\n  const inputBlurHandler = (event) => {\r\n    dispatchInputs({\r\n      type: \"INPUT_BLUR\",\r\n      value: true,\r\n    });\r\n  };\r\n\r\n  return {\r\n    value: inputs.enteredValue,\r\n    isValid: valueIsValid,\r\n    hasError,\r\n    valueChangeHandler,\r\n    inputBlurHandler,\r\n  };\r\n};\r\n\r\n//use useState\r\n\r\n// import { useState } from 'react';\r\n\r\n// export const useInput = (validateState) => {\r\n//   const [enteredValue, setEnteredValue] = useState(\"\");\r\n//   const [isTouched, setIsTouched] = useState(false);\r\n\r\n//   const valueIsValid = validateState(enteredValue) // true || false\r\n//   const hasError = !valueIsValid && isTouched\r\n\r\n//   const valueChangeHandler = (event) => {\r\n//       setEnteredValue(event.target.value)\r\n//   }\r\n//   const inputBlurHandler = (event) => {\r\n//       setIsTouched(true)\r\n//   }\r\n\r\n//   return {\r\n//       value: enteredValue,\r\n//       isValid: valueIsValid,\r\n//       hasError,\r\n//       valueChangeHandler,\r\n//       inputBlurHandler,\r\n//   }\r\n// };\r\n","// import { useState, useRef } from \"react\";\n\n// import React, { useState } from react;\nimport { useInput } from \"../itils/hooks/useInput\";\n\nconst SimpleInput = (props) => {\n  // alias\n  const {\n    value: enteredName,\n    isValid: enteredNameIsValid,\n    hasError: nameInputHasError,\n    valueChangeHandler: nameChangeHandler,\n    inputBlurHandler: nameBlurChangeHandler\n  }  = useInput((value) => value.trim() !== \"\");\n    \n  \n  const {\n    value: enteredEmail,\n    isValid: enteredEmailIsValid,\n    hasError: emailInputHasError,\n    valueChangeHandler: emailChangeHandler,\n    inputBlurHandler: emailBlurChangeHandler\n  }  =useInput((value)=>value.includes(\"@\"))\n\n  const {\n    value: enteredPassword,\n    isValid: enteredPasswordIsValid,\n    hasError: passwordInputHasError,\n    valueChangeHandler: passwordChangeHandler,\n    inputBlurHandler: passwordBlurChangeHandler\n  }  =useInput((value)=>value.length >=6)\n\n\n\n  let formIsValid = false;\n  if (enteredNameIsValid && enteredEmailIsValid && enteredPasswordIsValid) {\n    formIsValid = true;\n  }\n  const formSubmissionHandler = (event) => {\n    event.preventDefault();\n    if (!enteredNameIsValid  ) {\n      return;\n    }\n  };\n  const nameInputClasses = nameInputHasError\n    ? 'form-control invalid'\n    : 'form-control';\n  const emailInputClasses = emailInputHasError\n    ? 'form-control invalid'\n    : 'form-control';\n\n\n  const passwordInputClasses = passwordInputHasError\n    ? 'form-control invalid'\n    : 'form-control';\n\n\n  return (\n    <form onSubmit={formSubmissionHandler}>\n      <div className={nameInputClasses}>\n        <label htmlFor='name'>Your Name</label>\n        <input\n          type='text'\n          id='name'\n          value={enteredName}\n          onChange={nameChangeHandler}\n          onBlur={nameBlurChangeHandler}\n        />\n        {nameInputHasError && <p>Name must not be empty</p>}\n        </div>\n        <div className={emailInputClasses}>\n             <label htmlFor='name'>Your email</label>\n        <input\n          type='email'\n          id='email'\n          value={enteredEmail}\n          onChange={emailChangeHandler}\n          onBlur={emailBlurChangeHandler}\n        />\n         {passwordInputHasError && <p>Name must not be empty</p>}\n\n        </div>\n\n\n        <div className={passwordInputClasses}>\n             <label htmlFor='name'>Your password</label>\n        <input\n          type='password'\n          id='password'\n          value={enteredPassword}\n          onChange={passwordChangeHandler}\n          onBlur={passwordBlurChangeHandler}\n        />\n         {passwordInputHasError && <p>Name must not be empty</p>}\n\n        </div>\n        \n       \n      \n      <div className='form-actions'>\n        <button disabled={!formIsValid}>Submit</button>\n      </div>\n    </form>\n  );\n};\nexport default SimpleInput;\n\n\n\n\n\n// const SimpleInput = (props) => {\n//   const [enteredName, setEnteredName] = useState(\"\");\n//   const [isValid, setIsValid] = useState(false);\n//   const [enteredNameTouched, setEnteredNameTouched] = useState(false);\n//   const inputNameRef = useRef();\n\n//   const nameInputChangeHandler = (event) => {\n//     setEnteredName(event.target.value);\n//     if (!enteredName.includes(\"@\")) {\n//       setIsValid(true);\n//       setEnteredNameTouched(true);\n//     }\n//     console.log(enteredName);\n//   };\n\n//   const nameInputBlurHandler = (event) => {\n//     setEnteredNameTouched(true);\n\n//     if (!enteredName.trim() === \"\") {\n//       setIsValid(true);\n//       return;\n//     }\n//     if (!enteredName.includes(\"@\")) {\n//       setIsValid(true);\n//       return;\n//     }\n//     setEnteredNameTouched(false);\n//   };\n\n//   const formSubmissionHandler = (event) => {\n//     event.preventDefault();\n\n//     if (enteredName.trim() === \"\" || !enteredName.includes(\"@\")) {\n//       setIsValid(true);\n//       return;\n//     }\n//     setIsValid(false);\n//     const enteredRefName = inputNameRef.current.value;\n//     console.log(enteredRefName);\n//   };\n\n\n//   const nameInputIsValid = isValid && enteredNameTouched;\n//   const nameInputClasses = nameInputIsValid\n//     ? \"form-control invalid\"\n//     : \"form-control\";\n\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor=\"name\">Your Name</label>\n//         <input\n//           value={enteredName}\n//           ref={inputNameRef}\n//           type=\"text\"\n//           id=\"name\"\n//           onChange={nameInputChangeHandler}\n//           onBlur={nameInputBlurHandler}\n//         />\n//         {nameInputIsValid && <p>Name must not be empty</p>}\n//       </div>\n//       <div className=\"form-actions\">\n//         <button >Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n\n// export default SimpleInput;\n\n\n\n\n\n// import React, { useRef, useState } from “react”;\n// const SimpleInput = (props) => {\n//   const [enteredName, setEnteredName] = useState(“”);\n//   const [enteredNameTouched, setEnteredNameTouched] = useState(false)\n//   const enteredNameIsValid = enteredName.trim() !== ‘’ \n//   const nameInputIsInvalid = !enteredNameIsValid && enteredNameTouched\n//   const nameInputChangeHandler = (event) => {\n//     setEnteredName(event.target.value);\n//   };\n//   const nameInputBlurHandler = () => {\n//     setEnteredNameTouched(true)\n//   }\n//   const formSubmissionHandler = (event) => {\n//     event.preventDefault();\n//     setEnteredNameTouched(true)\n//     if(nameInputIsInvalid) {\n//       return\n//     }\n//     setEnteredNameTouched(false)\n//   };\n//   const nameInputClasses =  nameInputIsInvalid ? ‘form-control invalid’ : ‘form-control’\n//   return (\n//     <form onSubmit={formSubmissionHandler}>\n//       <div className={nameInputClasses}>\n//         <label htmlFor=“name”>Your Name</label>\n//         <input\n//           type=“text”\n//           id=“name”\n//           value={enteredName}\n//           onChange={nameInputChangeHandler}\n//           onBlur={nameInputBlurHandler}\n//         />\n//         {nameInputIsInvalid && <p>Name must not be empty</p>}\n//       </div>\n//       <div className=“form-actions”>\n//         <button disabled={true}>Submit</button>\n//       </div>\n//     </form>\n//   );\n// };\n// export default SimpleInput;","import SimpleInput from './components/SimpleInput';\nimport BasicForm from './components/BasicForm';\n\nfunction App() {\n  return (\n    <div className=\"app\">\n      {/* <BasicForm/> */}\n      <SimpleInput />\n    </div>\n  );\n}\n\nexport default App;\n","import ReactDOM from 'react-dom';\n\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(<App />, document.getElementById('root'));\n"],"sourceRoot":""}